{"version":3,"sources":["Components/robots.js","Components/Card.js","Components/CardList.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","email","Card","className","alt","src","func","map","robot","index","key","Search","action","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","console","log","Action","change","searchField","target","value","fetch","then","response","json","users","results","filter","toLowerCase","includes","length","CardList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0NAAaA,EAAS,CACpB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BC5CIC,EAbF,SAAC,GAAuB,IAAtBH,EAAqB,EAArBA,KAAME,EAAe,EAAfA,MAAOH,EAAQ,EAARA,GAExB,OACI,yBAAKK,UAAU,mDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BP,EAA1B,cACpB,6BACI,4BAAKC,GACL,2BAAIE,MCkBLK,EAtBF,SAAC,GAAc,IAAbT,EAAY,EAAZA,OAIX,OACI,6BAEQA,EAAOU,KAAI,SAACC,EAAOC,GACf,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLX,GAAID,EAAOY,GAAOX,GAClBC,KAAMF,EAAOY,GAAOV,KACpBE,MAAOJ,EAAOY,GAAOR,aCPlCU,EARA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACb,OACI,yBAAKT,UAAW,OACZ,2BAAOA,UAAW,gCAAiCU,KAAK,SAASC,YAAa,sBAAuBC,SAAUH,MCK5GI,G,MARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAQ,sBAAuBC,OAAQ,UACnEJ,EAAMK,YCoBJC,E,kDAvBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GAErBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAQG,KAAKJ,MAAMC,SACf,0DAEA,6BACKG,KAAKX,MAAMK,c,GAlBDQ,aCmDZC,E,kDA3CX,aAAe,IAAD,6BACVC,QAAQC,IAAI,MACZ,gBAgBJC,OAAS,SAACC,GACNH,QAAQC,IAAI,KACZ,EAAKJ,SAAS,CAACO,YAAaD,EAAOE,OAAOC,SAjB1C,EAAKd,MAAQ,CACT3B,OAAQ,GACRuC,YAAa,IALP,E,gEASO,IAAD,OAChBJ,QAAQC,IAAI,KACZM,MAAM,6CAA6CC,MAAK,SAAAC,GACpDA,EAASC,UACVF,MAAK,SAAAG,GACJ,EAAKd,SAAS,CAAChC,OAAQA,S,+BASrB,IAAD,EACyB+B,KAAKJ,MAA5B3B,EADF,EACEA,OAAQuC,EADV,EACUA,YACfJ,QAAQC,IAAI,KACZ,IAAMW,EAAU/C,EAAOgD,QAAO,SAAArC,GAC1B,OAAOA,EAAMT,KAAK+C,cAAcC,SAASX,EAAYU,kBAEzD,OAASjD,EAAOmD,OACZ,yBAAK7C,UAAW,MACZ,wBAAIA,UAAW,MAAf,UACA,kBAAC,EAAD,CAAQS,OAAQgB,KAAKM,SACrB,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAACe,EAAD,CAAUpD,OAAQ+C,OANP,wBAAIzC,UAAW,MAAf,kB,GA9BjB2B,aCGEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLM,QAAQN,MAAMA,EAAMuC,a","file":"static/js/main.f4f30c28.chunk.js","sourcesContent":["export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from \"react\";\r\n\r\nconst Card = ({name, email, id}) => {\r\n    // const {name, email, id} = props\r\n    return(\r\n        <div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${id}?200*200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n// import {robots} from \"./robots\";\r\n\r\n\r\nconst func = ({robots}) => {\r\n    // if (true) {\r\n    //     throw new Error\r\n    // }\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((robot, index) => {\r\n                    return (\r\n                        <Card\r\n                            key={index}\r\n                            id={robots[index].id}\r\n                            name={robots[index].name}\r\n                            email={robots[index].email}\r\n                        />\r\n                        )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default func\r\n","import React from \"react\"\r\n\r\n\r\nconst Search = ({action}) => {\r\n    return (\r\n        <div className={'pa2'}>\r\n            <input className={'pa3 ba b--green bg-light-blue'} type='search' placeholder={'Discover new robots'} onChange={action}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search","import React from \"react\";\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '2px solid lightblue', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, {Component} from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // this.state.hasError = true\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        return (this.state.hasError) ? (\r\n            <h1>Loading Failed, Try Again!</h1>\r\n        ) : (\r\n            <div>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry","import React, {Component} from \"react\";\nimport {robots} from \"../Components/robots\";\nimport CardList from \"../Components/CardList\";\nimport Search from '../Components/Searchbox'\nimport './App.css'\nimport Scroll from \"../Components/Scroll\";\nimport ErrorBoundry from \"../Components/ErrorBoundry\";\n\n\nclass App extends Component {\n    constructor() {\n        console.log('1')\n        super();\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        console.log('2')\n        fetch('http://jsonplaceholder.typicode.com/users').then(response => {\n            response.json()\n        }).then(users => {\n            this.setState({robots: robots})\n        })\n    }\n\n    Action = (change) => {\n        console.log('3')\n        this.setState({searchField: change.target.value})\n    }\n\n    render() {\n        const {robots, searchField} = this.state\n        console.log('4')\n        const results = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n        return (!robots.length) ? (<h3 className={'tc'}>Loading...</h3>) : (\n            <div className={'tc'}>\n                <h1 className={'f3'}>Robots</h1>\n                <Search action={this.Action}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={results}/>\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}